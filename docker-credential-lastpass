#!/usr/bin/env bash
# Copyright 2020 Eric Engestrom
# SPDX-License-Identifier: MIT
set -eu -o pipefail

# Docker credentials helper using LastPass as the backend
# See the URL below for more information:
declare -r help_url='https://docs.docker.com/engine/reference/commandline/login/#credentials-store'

# Contributions to this script are welcome; please open issues or send
# merge requests to the following repository:
declare -r repo_url='https://gitlab.com/1ace/docker-credential-lastpass'

# $PATH-accessible or full path to lastpass-cli's program
declare -r lpass=lpass

# Name of this program, for error messages
declare -r this=$(basename "$0")

# Folder in your LastPass account that will contain the various Docker
# credentials
declare -r docker_folder='Docker Credentials'

extract_domain() {
  sed -e 's/[^/]*\/\/\([^@]*@\)\?\([^:/]*\).*/\2/' <<< "$1"
}

for dep in "$lpass" jq
do
  if ! command -V "$dep" &>/dev/null
  then
    echo "$this requires $dep; please install it and try again."
    exit 1
  fi
done

# Login if necesary
if ! "$lpass" status --quiet
then
  read -rp "Enter LastPass username: " username
  if ! "$lpass" login --trust "$username"
  then
    echo "Failed to log into LastPass"
    exit 1
  fi
fi

# Get the list of all the LastPass IDs in the Docker folder
mapfile -t lpass_docker_ids < <("$lpass" ls "$docker_folder" --format '%ai')

store() {
  local payload=$(cat)
  local ServerURL=$(jq -r '.ServerURL' <<< "$payload")
  local Username=$(jq -r '.Username' <<< "$payload")
  local Secret=$(jq -r '.Secret' <<< "$payload")
  local domain=$(extract_domain "$ServerURL")
  local path="$docker_folder/$domain"
  local details
  printf -v details \
    'URL: %s\nUsername: %s\nPassword: %s' \
    "$ServerURL" "$Username" "$Secret"
  # If the entry already exists, update it instead of creating another one
  for id in "${lpass_docker_ids[@]}"
  do
    if [ "$ServerURL" == "$("$lpass" show "$id" --url)" ]
    then
      "$lpass" edit "$id" --non-interactive <<< "$details"
      exit
    fi
  done
  # Not found; create a new entry
  "$lpass" add "$path" --non-interactive <<< "$details"
}

get() {
  local ServerURL=$(cat)
  # Lastpass always adds http:// if the URL does not have a protocol
  if [[ "$ServerURL" != *"://"* ]]; then
    ServerURL="http://$ServerURL"
  fi
  for id in "${lpass_docker_ids[@]}"
  do
    if [ "$ServerURL" == "$("$lpass" show "$id" --url)" ]
    then
      printf \
        '{\n  "Username": "%s",\n  "Secret": "%s"\n}\n' \
        "$("$lpass" show "$id" --user)" \
        "$("$lpass" show "$id" --pass)"
      exit
    fi
  done
  echo '{}'
}

erase() {
  local ServerURL=$(cat)
  for id in "${lpass_docker_ids[@]}"
  do
    if [ "$ServerURL" == "$("$lpass" show "$id" --url)" ]
    then
      "$lpass" rm "$id"
      exit
    fi
  done
  echo "Could not find $ServerURL"
  exit 1
}

list() {
  local items=()
  for id in "${lpass_docker_ids[@]}"
  do
    local ServerURL=$("$lpass" show "$id" --url)
    local Username=$("$lpass" show "$id" --user)
    printf -v item '  "%s": "%s"' "$ServerURL" "$Username"
    items+=("$item")
  done
  printf '{\n'
  if [ ${#items[@]} -gt 0 ]
  then
    local first=${items[0]}
    set -- "${items[@]:1}"
    printf '%s' "$first" "${@/#/$',\n'}"
    set --
    printf '\n'
  fi
  printf '}\n'
}

if [ $# -eq 1 ]
then
  case "$1" in
    store|get|erase|list)
      "$1"
      exit
      ;;
  esac
fi

echo "This script provides a bridge allowing Docker to store its credentials in"
echo "your LastPass store."
echo ""
echo "For more information on how to use it, read the Docker documentation on"
echo "credential stores:"
echo "$help_url"
echo ""
echo "If you experience any issue with this script or want to improve it,"
echo "please open an issue or a merge request here:"
echo "$repo_url"
